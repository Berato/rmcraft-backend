"""
Cover Letter Analyst Agent

This agent analyzes a candidate's resume and job description to create
a strategic outline for a personalized cover letter.
"""

try:
    import os
    # Try to use real Google ADK by default, fall back to mock for testing
    if os.getenv('USE_MOCK_ADK', 'false').lower() == 'true':
        raise ImportError("Mock ADK forced for testing")
    from google.adk.agents import LlmAgent
    from google.adk.tools import FunctionTool
    from google.genai import types
    print("✅ Using real Google ADK")
except ImportError:
    print("⚠️ Google ADK not available, using mock implementation")
    # Import mock implementation
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
    from mock_adk import LlmAgent, FunctionTool
    # Mock types module
    import types

    class MockGenerateContentConfig:
        def __init__(self, temperature=0.1, response_mime_type=None, response_schema=None):
            self.temperature = temperature
            self.response_mime_type = response_mime_type
            self.response_schema = response_schema

    types.GenerateContentConfig = MockGenerateContentConfig
    types.Content = type('Content', (), {
        '__init__': lambda self, role, parts: None
    })
    types.Part = type('Part', (), {
        '__init__': lambda self, text=None, inline_data=None: None
    })

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import json


class CoverLetterOutline(BaseModel):
    """Schema for cover letter outline generated by analyst agent"""
    role_summary: str = Field(description="Brief summary of the target role")
    company_summary: str = Field(description="Brief summary of the company and role context")
    strong_matches: List[Dict[str, str]] = Field(description="List of strongest resume-job matches with evidence")
    risk_mitigations: List[Dict[str, str]] = Field(description="Potential gaps and how to address them")
    outline: Dict[str, Any] = Field(description="Structured outline for the cover letter")


def create_cover_letter_analyst_agent(resume_query_tool, job_description_query_tool):
    """
    Create the cover letter analyst agent that synthesizes JD + resume insights.

    Args:
        resume_query_tool: Function to query resume data from ChromaDB
        job_description_query_tool: Function to query job description data from ChromaDB

    Returns:
        LlmAgent configured for cover letter analysis
    """

    analyst_agent = LlmAgent(
        model="gemini-2.5-flash",
        name="cover_letter_analyst_agent",
        description="Analyze resume and job description to create strategic cover letter outline",
        instruction=(
            "You are an expert career strategist specializing in cover letter creation. "
            "Analyze the candidate's resume and the target job description to create a compelling outline for a personalized cover letter. "
            "\n\nYour task is to:"
            "\n1. Extract key requirements and responsibilities from the job description"
            "\n2. Identify the candidate's strongest qualifications and experiences that match"
            "\n3. Find specific examples from their resume that demonstrate relevant skills"
            "\n4. Identify any potential gaps and suggest mitigation strategies"
            "\n5. Create a structured outline for the cover letter with:"
            "\n   - Opening hook and fit statement"
            "\n   - 2-3 key body paragraphs with evidence"
            "\n   - Company connection or culture fit"
            "\n   - Strong closing with call-to-action"
            "\n\nIMPORTANT RULES:"
            "\n- Use ONLY facts and evidence from the provided resume and job description"
            "\n- Do not fabricate experiences, companies, or qualifications"
            "\n- Focus on specific, quantifiable achievements when available"
            "\n- Keep the outline concise but comprehensive"
            "\n- Ensure all claims can be backed up by resume content"
            "\n\nReturn a structured response with role_summary, company_summary, strong_matches, risk_mitigations, and outline."
        ),
        generate_content_config=types.GenerateContentConfig(
            temperature=0.3  # Lower temperature for more consistent analysis
        ),
        output_schema=CoverLetterOutline,
        output_key="analysis",
        tools=[resume_query_tool, job_description_query_tool],
    )

    return analyst_agent


async def run_cover_letter_analysis(
    analyst_agent,
    resume_id: str,
    job_description_url: str,
    session_service,
    session_id: str,
    user_id: str = "user_123"
):
    """
    Run the cover letter analysis using the analyst agent.

    Args:
        analyst_agent: The configured analyst agent
        resume_id: ID of the resume to analyze
        job_description_url: URL of the job description
        session_service: ADK session service
        session_id: Session ID for the agent run
        user_id: User ID for the session

    Returns:
        Dict containing the analysis results
    """

    from google.adk.runners import Runner

    # Create the session first
    session = await session_service.create_session(
        app_name="cover_letter_analysis",
        user_id=user_id,
        session_id=session_id
    )

    runner = Runner(agent=analyst_agent, session_service=session_service, app_name="cover_letter_analysis")

    content_parts = [
        types.Part(text=(
            f"Analyze resume {resume_id} and job description from {job_description_url} "
            f"to create a strategic cover letter outline. Focus on the candidate's strongest "
            f"qualifications and specific examples that match the job requirements."
        ))
    ]

    content = types.Content(
        role='user',
        parts=content_parts
    )

    analysis_result = None

    async for event in runner.run_async(new_message=content, session_id=session_id, user_id=user_id):
        if event.is_final_response() and event.content:
            if hasattr(event.content, 'parts') and event.content.parts:
                raw_text = event.content.parts[0].text.strip()
                try:
                    analysis_result = json.loads(raw_text)
                    print("✅ Cover letter analysis completed successfully")
                except json.JSONDecodeError as e:
                    print(f"❌ Failed to parse analysis result: {e}")
                    print(f"Raw response: {raw_text}")

    return analysis_result
