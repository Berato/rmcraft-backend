"""
Cover Letter Writer Agent

This agent takes the analysis outline and writes compelling cover letter content.
"""

try:
    import os
    # Try to use real Google ADK by default, fall back to mock for testing
    if os.getenv('USE_MOCK_ADK', 'false').lower() == 'true':
        raise ImportError("Mock ADK forced for testing")
    from google.adk.agents import LlmAgent
    from google.adk.tools import FunctionTool
    from google.genai import types
    print("✅ Using real Google ADK")
except ImportError:
    print("⚠️ Google ADK not available, using mock implementation")
    # Import mock implementation
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
    from mock_adk import LlmAgent, FunctionTool
    # Mock types module
    import types

    class MockGenerateContentConfig:
        def __init__(self, temperature=0.1, response_mime_type=None, response_schema=None):
            self.temperature = temperature
            self.response_mime_type = response_mime_type
            self.response_schema = response_schema

    types.GenerateContentConfig = MockGenerateContentConfig
    types.Content = type('Content', (), {
        '__init__': lambda self, role, parts: None
    })
    types.Part = type('Part', (), {
        '__init__': lambda self, text=None, inline_data=None: None
    })

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import json


class CoverLetterContent(BaseModel):
    """Schema for cover letter content generated by writer agent"""
    opening_paragraph: str = Field(description="Compelling opening paragraph with hook and fit statement")
    body_paragraphs: List[str] = Field(description="2-3 body paragraphs with evidence and achievements")
    company_connection: Optional[str] = Field(description="Optional paragraph about company connection/mission alignment")
    closing_paragraph: str = Field(description="Strong closing with call-to-action")
    tone: str = Field(description="Recommended tone (professional, creative, enthusiastic, formal)")


def create_cover_letter_writer_agent(resume_query_tool, job_description_query_tool):
    """
    Create the cover letter writer agent that drafts compelling content.

    Args:
        resume_query_tool: Function to query resume data from ChromaDB
        job_description_query_tool: Function to query job description data from ChromaDB

    Returns:
        LlmAgent configured for cover letter writing
    """

    writer_agent = LlmAgent(
        model="gemini-2.5-flash",
        name="cover_letter_writer_agent",
        description="Write compelling, personalized cover letter content based on analysis outline",
        instruction=(
            "You are a professional cover letter writer with expertise in crafting compelling narratives. "
            "Take the analysis outline and write engaging, personalized cover letter content that showcases the candidate's qualifications."
            "\n\nYour task is to:"
            "\n1. Write a compelling opening paragraph that hooks the reader and states fit"
            "\n2. Create 2-3 body paragraphs that provide specific evidence and achievements"
            "\n3. Include a company connection paragraph if relevant (mission, values, culture)"
            "\n4. Write a strong closing paragraph with clear call-to-action"
            "\n5. Choose an appropriate professional tone"
            "\n\nWRITING GUIDELINES:"
            "\n- Keep total length to 250-450 words (roughly 3/4 to 1 page)"
            "\n- Use specific examples and quantifiable achievements when possible"
            "\n- Show enthusiasm and genuine interest in the role/company"
            "\n- Maintain professional yet personable tone"
            "\n- Avoid generic phrases; be specific to this candidate and role"
            "\n- Ensure all claims are backed by resume evidence"
            "\n- Use active voice and strong action verbs"
            "\n\nReturn structured content with opening_paragraph, body_paragraphs, company_connection, closing_paragraph, and tone."
        ),
        generate_content_config=types.GenerateContentConfig(
            temperature=0.6  # Higher temperature for creative writing
        ),
        output_schema=CoverLetterContent,
        output_key="content",
        tools=[resume_query_tool, job_description_query_tool],
    )

    return writer_agent


async def run_cover_letter_writing(
    writer_agent,
    analysis_outline: Dict[str, Any],
    resume_id: str,
    job_description_url: str,
    optional_prompt: Optional[str],
    session_service,
    session_id: str,
    user_id: str = "user_123"
):
    """
    Run the cover letter writing using the writer agent.

    Args:
        writer_agent: The configured writer agent
        analysis_outline: The outline from the analyst agent
        resume_id: ID of the resume
        job_description_url: URL of the job description
        optional_prompt: Optional user prompt for tone or focus
        session_service: ADK session service
        session_id: Session ID for the agent run
        user_id: User ID for the session

    Returns:
        Dict containing the written content
    """

    from google.adk.runners import Runner

    # Create the session first
    session = await session_service.create_session(
        app_name="cover_letter_writing",
        user_id=user_id,
        session_id=session_id
    )

    runner = Runner(agent=writer_agent, session_service=session_service, app_name="cover_letter_writing")

    # Build the prompt with analysis context
    prompt_parts = [
        f"Write a compelling cover letter for resume {resume_id} and job at {job_description_url}.",
        f"Analysis outline: {json.dumps(analysis_outline, indent=2)}"
    ]

    if optional_prompt:
        prompt_parts.append(f"Additional instructions: {optional_prompt}")

    content_parts = [
        types.Part(text="\n\n".join(prompt_parts))
    ]

    content = types.Content(
        role='user',
        parts=content_parts
    )

    writing_result = None

    async for event in runner.run_async(new_message=content, session_id=session_id, user_id=user_id):
        if event.is_final_response() and event.content:
            if hasattr(event.content, 'parts') and event.content.parts:
                raw_text = event.content.parts[0].text.strip()
                try:
                    writing_result = json.loads(raw_text)
                    print("✅ Cover letter writing completed successfully")
                except json.JSONDecodeError as e:
                    print(f"❌ Failed to parse writing result: {e}")
                    print(f"Raw response: {raw_text}")

    return writing_result
